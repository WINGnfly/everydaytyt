import requests
import re
import os
import time

# === C·∫§U H√åNH COOKIE ===
cookie_ci_session = os.getenv("CI_SESSION")  # l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng GitHub Actions

# === TH∆Ø M·ª§C CH·ª®A TRUY·ªÜN ===
DATA_DIR = "noveldata"
BATCH_SIZE = 10

# === H√ÄM T√ÅCH CH∆Ø∆†NG ===
def split_chapters(text):
    chapters = re.split(r'(?=^Ch∆∞∆°ng\s+\d+[:Ôºö])', text, flags=re.MULTILINE)
    return [ch.strip() for ch in chapters if ch.strip()]

# === H√ÄM L·∫§Y S·ªê CH∆Ø∆†NG ƒê·∫¶U TI√äN ===
def extract_start_number(chapter_text):
    match = re.search(r'^Ch∆∞∆°ng\s+(\d+)', chapter_text, re.IGNORECASE)
    return int(match.group(1)) if match else None

# === G·ª¨I L√î CH∆Ø∆†NG ===
def send_batch(story_id, start_number, chapters):
    session = requests.Session()
    session.cookies.set("ci_session", cookie_ci_session)

    headers = {
        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
        "User-Agent": "Mozilla/5.0",
        "X-Requested-With": "XMLHttpRequest",
        "Referer": f"https://tytnovel.xyz/mystory/{story_id}/chapters/new"
    }

    chapter_content = ""
    for ch in chapters:
        lines = ch.splitlines()
        if not lines:
            continue
        title_line = lines[0].strip()
        body_lines = lines[1:]
        content = '\n'.join(f"<p>{line.strip()}</p>" for line in body_lines if line.strip())
        chapter_html = f"<p>{title_line}</p>{content}"
        chapter_content += chapter_html

    data = {
        "story_id": story_id,
        "number_from": start_number,
        "number_to": start_number + len(chapters) - 1,
        "chapter_content": chapter_content,
        "published": 1
    }

    print(f"üì§ G·ª≠i ch∆∞∆°ng {data['number_from']} ‚Üí {data['number_to']} ...")

    try:
        res = session.post(
            f"https://tytnovel.xyz/mystory/{story_id}/chapters/add_multi",
            headers=headers,
            data=data,
            timeout=30
        )
        res.raise_for_status()
        print("‚úÖ Th√†nh c√¥ng!")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i ch∆∞∆°ng {start_number}-{start_number + len(chapters) - 1}: {e}")
        return False

# === QU√âT FILE TRONG TH∆Ø M·ª§C ===
for filename in os.listdir(DATA_DIR):
    if filename.startswith("truyen_") and filename.endswith(".txt"):
        story_id = filename.replace("truyen_", "").replace(".txt", "")
        file_path = os.path.join(DATA_DIR, filename)

        with open(file_path, "r", encoding="utf-8") as f:
            raw = f.read()

        chapters = split_chapters(raw)
        if len(chapters) < 21:
            print(f"‚ö†Ô∏è B·ªè qua {filename} (ch·ªâ c√≥ {len(chapters)} ch∆∞∆°ng, y√™u c·∫ßu t·ªëi thi·ªÉu 20).")
            continue

        start_number = extract_start_number(chapters[0])
        if start_number is None:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y s·ªë b·∫Øt ƒë·∫ßu trong {filename}. B·ªè qua.")
            continue

        batch = chapters[:BATCH_SIZE]
        success = send_batch(story_id, start_number, batch)

        # N·∫øu g·ª≠i th√†nh c√¥ng ‚Üí ghi l·∫°i ph·∫ßn ch∆∞a g·ª≠i v√†o file
        if success:
            remaining = "\n\n".join(chapters[BATCH_SIZE:])
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(remaining)
            print(f"üóë ƒê√£ x√≥a ch∆∞∆°ng {start_number} ‚Üí {start_number + BATCH_SIZE - 1} kh·ªèi {filename}")
        else:
            print(f"‚ö†Ô∏è B·ªè qua x√≥a ch∆∞∆°ng do g·ª≠i l·ªói.")
            
        time.sleep(60)
